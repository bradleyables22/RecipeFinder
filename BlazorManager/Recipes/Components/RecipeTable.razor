@inject IClientService _client

<div class="container-fluid mt-5 text-center">
    <div class="btn btn-success mb-3">Create</div>
    <table class="table table-striped table-dark">
        <thead>
            <tr>
                <th scope="col">Published On</th>
                <th scope="col">Title</th>
                <th scope="col">Description</th>
                <th scope="col">Expense</th>
                <th scope="col">Category</th>
                <th scope="col">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var recipe in _recipes.OrderByDescending(x => x.PublishedAt))
            {
                <tr>
                    <td>@recipe.PublishedAt.ToShortDateString()</td>
                    <td>@recipe.Title</td>
                    <td>@recipe.Description</td>
                    <td> @recipe.ExpenseRating</td>
                    <td>@recipe.CategoryName</td>
                    <td>
                        <div class="row">
                            <div class="col-6 text-end">
                                <div class="btn btn-sm btn-secondary">Edit</div>
                            </div>
                            <div class="col-6 text-start">
                                <div class="btn btn-info btn-sm" @onclick="()=>DeleteRecipe(recipe.RecipeID.ToString())">Delete</div>
                            </div>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    List<RecipeDTO> _recipes = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            _recipes = await GetAllRecipesAsync();
            StateHasChanged();
        }
    }

    public async Task<List<RecipeDTO>> GetAllRecipesAsync()
    {
        RestRequest request = new RestRequest(RecipeAPI.AllRecipes);
        List<RecipeDTO> dtos = new();
        var result = await _client.TryGetAsync<List<RecipeDTO>>(request);

        if (result.IsFailure)
            return dtos;

        var nullOrEmptyCheck = result
            .Ensure(x => x != null, "Successful, but null")
            .Ensure(x => x.Count != 0, "Successful, but empty");

        if (nullOrEmptyCheck.IsFailure)
            return dtos;

        return nullOrEmptyCheck.Data;
    }

    public async Task<bool> DeleteRecipe(string id)
    {
        RestRequest request = new RestRequest(RecipeAPI.DeleteRecipe, Method.Delete);
        request.AddHeader("recipeID", id);

        List<RecipeDTO> recipeDTOs = new();
        var result = await _client.TryDeleteAsync<RecipeDTO>(request);
        if (result.IsFailure)
            return false;

        return true;
    }
}
